# Projeto Final: Teste do Aplicativo Urban Scooter - TripleTen

## Vis√£o Geral

Este projeto foi desenvolvido como o **Projeto Final do Bootcamp de An√°lise de QA da TripleTen**. O objetivo foi realizar testes abrangentes do aplicativo **Urban Scooter**, cobrindo sua interface web, aplicativo m√≥vel e backend (API e banco de dados). O projeto foi dividido em tr√™s tarefas principais: testes manuais da interface web, testes do aplicativo m√≥vel em um emulador Android e testes do backend via Postman e consultas SQL. Os resultados foram documentados em um arquivo do Google Sheets, com bugs registrados no Jira.

## Objetivos do Projeto

- **Tarefa 1 (Web)**: Testar o formul√°rio "About Customer" da interface web do Urban Scooter, validando campos como nome e n√∫mero de telefone em dois navegadores.
- **Tarefa 2 (M√≥vel)**: Testar as funcionalidades destacadas do aplicativo m√≥vel Urban Scooter, incluindo layout e comportamento, em um emulador Android.
- **Tarefa 3 (Backend)**: Testar os endpoints da API para adicionar e excluir entregadores, al√©m de verificar o banco de dados associado.
- **Documenta√ß√£o**: Registrar casos de teste, resultados e bugs em um arquivo do Google Sheets e no Jira, garantindo rastreabilidade e clareza.

## Metodologia

### Tarefa 1: Teste da Interface Web do Urban Scooter

1. **An√°lise de Requisitos**:
   - Estudei os requisitos do aplicativo web dispon√≠veis no link fornecido e consultei os layouts no Figma para entender o formul√°rio "About Customer" (t√≠tulo: "Para quem √© a scooter").
   - Identifiquei os campos a serem testados: nome e n√∫mero de telefone.

2. **Cria√ß√£o de Casos de Teste**:
   - Desenvolvi casos de teste positivos (ex.: nome v√°lido, n√∫mero de telefone no formato correto) e negativos (ex.: campos vazios, n√∫mero inv√°lido) para o formul√°rio "About Customer".
   - Registrei os casos na aba correspondente do modelo do Google Sheets.

3. **Execu√ß√£o de Testes**:
   - Realizei os testes em dois navegadores:
     - **Google Chrome** (vers√£o 85 ou superior, resolu√ß√£o 1280x720)
     - **Opera** (vers√£o 71 ou superior, resolu√ß√£o 1280x720)
   - Marquei os resultados como APROVADO ou REPROVADO na planilha.
   - Para testes reprovados, criei relat√≥rios de bugs no Jira, incluindo t√≠tulo, etapas, resultado esperado, resultado real e prioridade (Bloqueador, Cr√≠tico, Grande, Pequeno ou Trivial).
   - Vinculei os IDs dos relat√≥rios de bugs √† coluna correspondente no Google Sheets.

### Tarefa 2: Teste do Aplicativo M√≥vel Urban Scooter

1. **Prepara√ß√£o do Ambiente**:
   - Iniciei o servidor do Urban Scooter para obter a URL de acesso.
   - Baixei o APK do aplicativo m√≥vel Urban Scooter e instalei no emulador **Android Studio** (Pixel 5, Android 31).
   - Configurei o aplicativo inserindo a URL da API no campo fornecido (√≠cone "?" na tela inicial).
   - Criei um entregador via API POST, conforme documenta√ß√£o no `URL+/docs/pt/`, enviando os par√¢metros no formato JSON.

2. **An√°lise de Requisitos**:
   - Estudei os requisitos do aplicativo m√≥vel, focando nas funcionalidades destacadas em amarelo.
   - Consultei os designs no Figma para validar o layout.

3. **Cria√ß√£o de Casos de Teste**:
   - Desenvolvi casos de teste para as funcionalidades destacadas, cobrindo layout (ex.: disposi√ß√£o de elementos, ortografia) e comportamento (ex.: intera√ß√£o com funcionalidades espec√≠ficas).
   - Inclu√≠ cen√°rios positivos e negativos, registrados na aba correspondente do Google Sheets.

4. **Execu√ß√£o de Testes**:
   - Executei os testes no emulador Pixel 5, ajustando o hor√°rio do emulador quando necess√°rio para testar requisitos baseados em tempo.
   - Marquei os resultados como APROVADO ou REPROVADO na planilha.
   - Registrei bugs no Jira para testes reprovados, vinculando os IDs √† planilha.

5. **Solu√ß√£o de Bloqueios**:
   - Quando um teste falhou em um navegador ou no aplicativo, busquei alternativas (ex.: recriar o teste em outro navegador ou criar pedidos via interface web para visualiza√ß√£o no aplicativo m√≥vel).

### Tarefa 3: Teste do Backend do Urban Scooter

1. **Prepara√ß√£o do Ambiente**:
   - Iniciei o servidor para obter a URL do projeto e acessei a documenta√ß√£o da API em `URL+/docs/pt/`.
   - Configurei o **Postman** com a URL para testar os endpoints da API.
   - Conectei-me ao banco de dados `scooter_rent` usando o comando `psql -U morty -d scooter_rent` (senha: `smith`), considerando aspas duplas para tabelas com letras mai√∫sculas (ex.: `SELECT * FROM "Couriers"`).

2. **An√°lise de Requisitos**:
   - Examinei os requisitos de backend, focando nos endpoints destacados em amarelo para adicionar e excluir entregadores.

3. **Cria√ß√£o de Casos de Teste**:
   - Desenvolvi casos de teste para os endpoints de adicionar e excluir entregadores, incluindo:
     - **Cen√°rios positivos**: Ex.: adicionar um entregador com dados v√°lidos, excluir um entregador existente.
     - **Cen√°rios negativos**: Ex.: tentar adicionar um entregador com dados inv√°lidos, excluir um entregador inexistente.
   - Registrei os casos na aba "Tarefa 3: Casos de teste da API" do Google Sheets.

4. **Execu√ß√£o de Testes**:
   - Testei os endpoints via Postman, verificando c√≥digos de resposta HTTP, payloads e comportamento do banco de dados.
   - Validei os dados no banco de dados com consultas SQL, garantindo consist√™ncia com as a√ß√µes da API.
   - Marquei os resultados como APROVADO ou REPROVADO na planilha.
   - Registrei bugs no Jira para testes reprovados, vinculando os IDs √† planilha.

## Ferramentas Utilizadas

- **Google Chrome e Opera**: Para testes da interface web (vers√µes 85+ e 71+, respectivamente, resolu√ß√£o 1280x720).
- **Android Studio**: Para execu√ß√£o do aplicativo m√≥vel no emulador Pixel 5 (Android 31).
- **Postman**: Para testes dos endpoints da API.
- **PostgreSQL**: Para consultas no banco de dados `scooter_rent`.
- **Google Sheets**: Para documentar casos de teste, resultados e links para relat√≥rios de bugs.
- **Google Docs**: Para anexar o link do modelo e outros recursos.
- **Jira**: Para registro de bugs.
- **Figma**: Para consulta dos layouts do aplicativo web e m√≥vel.
- **Urban Scooter**: Aplicativo testado (web, m√≥vel e backend).

## Estrutura do Reposit√≥rio

- `Teste do Urban Scooter.xlsx`: Modelo preenchido com casos de teste, resultados e links para relat√≥rios de bugs (nomeado como "[Seu Nome], [Sobrenome], [Grupo] ‚Äî Projeto Final").
- `Teste do Urban Scooter.docx`: Documento com links para a planilha e outros recursos (nomeado conforme instru√ß√µes).
- `README.md`: Este arquivo, descrevendo o projeto.

## Resultados

- Criei e executei casos de teste abrangentes para o formul√°rio "About Customer" da interface web, validando funcionalidade e layout em dois navegadores.
- Testei as funcionalidades destacadas do aplicativo m√≥vel Urban Scooter, garantindo cobertura de layout e comportamento, com ajustes no emulador para superar bloqueios.
- Validei os endpoints de adicionar e excluir entregadores no backend, verificando a consist√™ncia com o banco de dados.
- Documentei todos os resultados no Google Sheets e registrei bugs no Jira, assegurando rastreabilidade e clareza.
- Contribu√≠ para a garantia de qualidade do Urban Scooter, identificando e reportando problemas para melhorar a experi√™ncia do usu√°rio.

## Sobre Mim

Sou um profissional em transi√ß√£o de carreira para a √°rea de Qualidade de Software, com forma√ß√£o no **Bootcamp de An√°lise de QA da TripleTen**. Minha experi√™ncia pr√©via em ambientes din√¢micos me proporcionou habilidades como aten√ß√£o aos detalhes, organiza√ß√£o e colabora√ß√£o. Estou entusiasmado para aplicar meus conhecimentos em testes manuais e automatizados, abrangendo interfaces web, aplicativos m√≥veis e APIs, para garantir a qualidade de produtos digitais.

## Contato

- üìç S√£o Paulo, Brasil
- üìß luis_commans@hotmail.com
- üîó https://www.linkedin.com/in/danilocommansqa
- üíª https://github.com/MrCommans

Obrigado por visitar meu reposit√≥rio! üõµ
